---
import HeroContainer from '../../layouts/HeroContainer.astro'
import '../../styles/global.css'
import '../../styles/homepage.css'
import '../../styles/hero/hero3.css'
---

<HeroContainer title="Hero 3">
    <div id="gallery">
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
        <div class="block"></div>
      </div>
      

    <script>
        import { gsap } from "gsap";

        interface BlockElement extends HTMLElement {
            cx?: number;
            cy?: number;
            tween?: gsap.core.Tween;
        }

        const gallery = document.getElementById("gallery");
        
            window.onmousemove = (e) => {
              const mouseX = e.clientX,
                mouseY = e.clientY;
        
              const xDecimal = mouseX / window.innerWidth,
                yDecimal = mouseY / window.innerHeight;
        
              const maxX = gallery.offsetWidth - window.innerWidth,
                maxY = gallery.offsetHeight - window.innerHeight;
        
              const panX = maxX * xDecimal * -1,
                panY = maxY * yDecimal * -1;
        
              gallery.animate(
                {
                  transform: `translate(${panX}px, ${panY}px)`,
                },
                {
                  duration: 4000,
                  fill: "forwards",
                  easing: "ease",
                }
              );
            };
        
            const radius = 300,
              maxScale = 3,
              blocks = document.querySelectorAll(".block"),
              radius2 = radius * radius,
              container = document.querySelector("#gallery");
        
            blocks.forEach((block) => {
                const b = block.getBoundingClientRect();
                const enhancedBlock = block as BlockElement; // Utilisez l'interface personnalisée
                enhancedBlock.cx = b.left + b.width / 2 + window.scrollX,
                enhancedBlock.cy = b.top + b.height / 2 + window.scrollY;

                enhancedBlock.tween = gsap
                    .to(enhancedBlock, { scale: maxScale, ease: "power1.in", paused: true })
                    .progress(1)
                    .progress(0);
            });

        
            document.addEventListener("mousemove", (e) => {
            let i = blocks.length,
                dx,
                dy;
            while (i--) {
                const block = blocks[i] as BlockElement; // Utilisez l'interface personnalisée
                dx = (block.cx! - e.pageX) ** 2;
                dy = (block.cy! - e.pageY) ** 2;
                block.tween!.progress(1 - (dx + dy) / radius2);
            }
            });


    </script>
</HeroContainer>

