---
import HeroContainer from '../../layouts/HeroContainer.astro'
import '../../styles/global.css'
import '../../styles/homepage.css'
import '../../styles/hero/hero4.css'
---

<HeroContainer title="Hero 4">
      <div class="gallery">
        <ul class="cards">
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
          <li></li>
        </ul>
      </div>
      <script>
        import { gsap } from "gsap";
		import { ScrollToPlugin } from "gsap/ScrollToPlugin";
		import { ScrollTrigger } from "gsap/ScrollTrigger"; 
		gsap.registerPlugin( ScrollTrigger, ScrollToPlugin ); 
  
        let iteration = 0;
        const spacing = 0.05,
          snap = gsap.utils.snap(spacing),
          cards = gsap.utils.toArray(".cards li"),
          seamlessLoop = buildSeamlessLoop(cards, spacing),
          scrub = gsap.to(seamlessLoop, {
            totalTime: 0,
            duration: 0.5,
            ease: "power3",
            paused: true,
          }),
          trigger = ScrollTrigger.create({
            start: 0,
            onUpdate(self) {
                let trigger = self as any; // Convertit 'self' en 'any'
                if (self.progress === 1 && self.direction > 0 && !trigger.wrapping) {
                    wrapForward(self);
                } else if (
                    self.progress < 1e-5 &&
                    self.direction < 0 &&
                    !trigger.wrapping
                ) {
                    wrapBackward(self);
                } else {
                    scrub.vars.totalTime = snap(
                    (iteration + self.progress) * seamlessLoop.duration()
                    );
                    scrub.invalidate().restart();
                    trigger.wrapping = false; // Pas d'erreur ici car 'trigger' est de type 'any'
                }
                },

            end: "+=3000",
            pin: ".gallery",
          });
  
          function wrapForward(trigger) {
                iteration++;
                let triggerAny = trigger as any; // Convertit 'trigger' en 'any'
                triggerAny.wrapping = true;
                trigger.scroll(trigger.start + 1);
            }

            function wrapBackward(trigger) {
                iteration--;
                let triggerAny = trigger as any; // Convertit 'trigger' en 'any'
                if (iteration < 0) {
                    iteration = 9;
                    seamlessLoop.totalTime(
                    seamlessLoop.totalTime() + seamlessLoop.duration() * 10
                    );
                    scrub.pause();
                }
                triggerAny.wrapping = true;
                trigger.scroll(trigger.end - 1);
            }

  
        function buildSeamlessLoop(items, spacing) {
          let overlap = Math.ceil((1 / spacing) * 2),
            startTime = items.length * spacing + 0.5,
            loopTime = (items.length + overlap) * spacing + 1,
            rawSequence = gsap.timeline({ paused: true }),
            seamlessLoop = gsap.timeline({
              paused: true,
              repeat: -1,
              onRepeat() {
                this._time === this._dur && (this._tTime += this._dur - 0.05);
              },
            }),
            l = items.length + overlap * 2,
            time = 0,
            i,
            index,
            item;
  
          gsap.set(items, { yPercent: 400, opacity: 1, scale: 0 });
  
          for (i = 0; i < l; i++) {
            index = i % items.length;
            item = items[index];
            time = i * spacing;
            rawSequence
              .fromTo(
                item,
                { scale: 0, opacity: 1 },
                {
                  scale: 1,
                  opacity: 1,
  
                  zIndex: 100,
                  duration: 0.5,
                  yoyo: true,
                  repeat: 1,
                  ease: "power1.in",
                  immediateRender: false,
                },
                time
              )
              .fromTo(
                item,
                { yPercent: 300 },
                {
                  yPercent: -200,
                  duration: 1,
                  ease: "none",
                  immediateRender: false,
                },
                time
              );
            i <= items.length && seamlessLoop.add("label" + i, time);
          }
  
          rawSequence.time(startTime);
          seamlessLoop
            .to(rawSequence, {
              time: loopTime,
              duration: loopTime - startTime,
              ease: "none",
            })
            .fromTo(
              rawSequence,
              { time: overlap * spacing + 1 },
              {
                time: startTime,
                duration: startTime - (overlap * spacing + 1),
                immediateRender: false,
                ease: "none",
              }
            );
          return seamlessLoop;
        }
      </script>
</HeroContainer>

