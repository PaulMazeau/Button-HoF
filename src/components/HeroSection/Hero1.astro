---
import HeroContainer from '../../layouts/HeroContainer.astro'
import '../../styles/global.css'
import '../../styles/homepage.css'
import '../../styles/hero/hero1.css'
---
<HeroContainer title="Hero 1">
	<h1>W.I.P</h1>
	<div id="cursor-word">CLICK</div>
	<canvas id="draw"></canvas>
	<script>
		document.addEventListener('pointermove', function(e) {
			var motSuiveur = document.getElementById('cursor-word');
			motSuiveur.style.left = e.pageX + 'px';
			motSuiveur.style.top = e.pageY + 'px';
			motSuiveur.style.display = 'block';
		});
	
		const canvas = document.querySelector("canvas");
		const ctx = canvas.getContext("2d");
	
		// Ajuste la taille du canvas lorsque la fenêtre est redimensionnée
		function resizeCanvas() {
			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;
			ctx.fillStyle = "black";
			ctx.fillRect(0, 0, canvas.width, canvas.height);
		}
		window.addEventListener('resize', resizeCanvas);
		resizeCanvas();
	
		ctx.lineJoin = "round";
		ctx.lineCap = "round";
		ctx.lineWidth = 200;
		ctx.globalCompositeOperation = "destination-out";
	
		let isDrawing = false;
		let lastX = 0;
		let lastY = 0;
	
		function draw(e) {
			if (!isDrawing) return;
			ctx.beginPath();
			ctx.moveTo(lastX, lastY);
			// Utilise clientX et clientY pour la compatibilité avec les événements tactiles
			ctx.lineTo(e.clientX, e.clientY);
			ctx.stroke();
			[lastX, lastY] = [e.clientX, e.clientY];
		}
	
		canvas.addEventListener("pointerdown", (e) => {
			isDrawing = true;
			[lastX, lastY] = [e.clientX, e.clientY];
		});
	
		canvas.addEventListener("pointermove", draw);
		canvas.addEventListener("pointerup", () => (isDrawing = false));
		canvas.addEventListener("pointerout", () => (isDrawing = false));
	</script>
	
</HeroContainer>
